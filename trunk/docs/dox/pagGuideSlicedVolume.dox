/**

	\page pagGuideSlicedVolume Volume Rendering with Transfer Functions and Lighting Tutorial

	This tutorial demonstrates how to use the vl::SlicedVolume class to render a volume in various ways.
	
	<center>
	<table border=0 cellspacing=0 cellpadding=5>
	<tr>
		<td> \image html pagGuideSlicedVolume.jpg </td>
		<td> \image html pagGuideSlicedVolume_3.jpg </td>
	</tr>
	</table>
	<table border=0 cellspacing=0 cellpadding=5>
	<tr>
		<td> \image html pagGuideSlicedVolume_1.jpg </td>
		<td> \image html pagGuideSlicedVolume_2.jpg </td>
		<td> \image html pagGuideSlicedVolume_4.jpg </td>
	</tr>
	<tr>
		<td> \image html pagGuideSlicedVolume_5.jpg </td>
		<td> \image html pagGuideSlicedVolume_6.jpg </td>
		<td> \image html pagGuideSlicedVolume_7.jpg </td>
	</tr>
	</table>
	</center>
	
	The example below demonstrates how to use an arbitrary GLSL program and transfer function to render a volume. The fragment shader used
	in this example is capable of computing the volume gradient and per-pixel lighting in real-time with up to 4 lights at the same time. 
	It's also capable of taking advantage of a precomputed normal-texture to speedup the lighting computations. You can drag and drop in 
	the window any supported volume data to	visualize it at different threshold level. The threshold level can be modified using the mouse 
	wheel.
	
	[From \p App_VolumeSliced.cpp]
	\dontinclude App_VolumeSliced.cpp
	\skip #include
	\until // Have fun!

	[From \p volume_luminance_light.vs]
	\dontinclude volume_luminance_light.vs
	\skip //
	\until // Have fun!

	[From \p volume_luminance_light.fs]
	\dontinclude volume_luminance_light.fs
	\skip //
	\until // Have fun!

*/