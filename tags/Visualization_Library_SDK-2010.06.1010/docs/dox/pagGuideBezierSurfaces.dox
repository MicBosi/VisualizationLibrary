/**

	\page pagGuideBezierSurfaces Bicubic Bézier Patches and Surfaces Tutorial

	In the following tutorial you will learn how to manage and generate bicubic Bezier surfaces and how to concatenate multiple patches.
	
	<center>
	<table border=0 cellspacing=0 cellpadding=5 width=1%>
	<tr>
		<td> \image html pagGuideBezierSurfaces1.jpg </td>
		<td> \image html pagGuideBezierSurfaces2.jpg </td>
		<td> \image html pagGuideBezierSurfaces3.jpg </td>
	</tr>
	<tr>
		<td align=center colspan=3> A Bézier surface defined by multiple concatenated patches rendered with an ascending (from left to right) tessellation level. The dots and the white lines represent the control points of the patches, the red dots represent the corner control points that are guaranteed to touch the Bézier surface.</td>
	</tr>
	</table>
	</center>
	
From Wikipedia [<a href="http://en.wikipedia.org/wiki/Bézier_surface">http://en.wikipedia.org/wiki/Bézier_surface</a>]:

<i>"Bézier surfaces are a species of mathematical spline used in computer graphics, computer-aided design, and finite element modelling. As with the Bézier curve, a Bézier surface is defined by a set of control points. Similar to interpolation in many respects, a key difference is that the surface does not, in general, pass through the central control points; rather, it is "stretched" toward them as though each were an attractive force. They are visually intuitive, and for many applications, mathematically convenient."

"Bézier surfaces were first described in 1972 by the French engineer Pierre Bézier who used them to design automobile bodies. Bézier surfaces can be of any degree, but bicubic Bézier surfaces generally provide enough degrees of freedom for most applications."</i>

	As you will se the actual code dealing with the Bezier patches is less than ten lines of code! The majority of the code is dedicated to generate the patch data, to setup the effects, to manage the user input and so on.
	
	[From \p App_BezierSurfaces.hpp]
	\dontinclude App_BezierSurfaces.hpp
	\skip class
	\until // Have fun!
*/