/**

	\page pagIntro Introduction
	
Welcome to Visualization Library!

Visualization Library has been developed by Michele Bosi. He can be contacted at:

	- info@visualizationlibrary.com
	- http://www.linkedin.com/in/michelebosi

	\b Visualization \b Library is a C++ middleware for high-performance 2-3D graphics applications based on the industry standard OpenGL 2.1, designed to develop portable applications for the Windows, Linux and Mac OS X operating systems.
	
	Visualization Library can be used to develop applications for 2D and 3D scientific visualization (material sciences, geosciences, oil and gas exploration etc.), civil and military training and simulation, virtual reality, augmented reality, visual simulation, plotting, data mining and visualization, presentations, multimedia applications, special effects, 2D and 3D games and so on.
	
Visualization Library is not a pre-packaged rendering engine or a game engine, as this would limit its scope. Visualization Library has been designed to be a fine-grained platform upon which highly-specialized 3D graphics applications can be effectively developed. Instead of abstracting the user from the underlying OpenGL API, Visualization Library stays as close as possible to it and defines a very thin high-performance layer on top of it. The result is that many OpenGL functions and features have a 1 to 1 mapping to Visualization Library's classes. You can think of Visualization Library as a toolkit that provides you with the power and flexibility of OpenGL within a light and user friendly C++ object oriented framework. If you need a simple, flexible, portable and fast 3d graphics platform that can be quickly integrated in your applications then you should consider using Visualization Library.

	If you would like to be notified of the latest developments, events and news regarding Visualization Library subscribe to 
	<a href="http://www.visualizationlibrary.com/newsletter/?p=subscribe&id=1">Visualization Library Newsletter</a>.
	
Do not forget to check out also our Twitter page at <a href="http://twitter.com/VizLibrary">http://twitter.com/VizLibrary</a>.
	
\par Visualization Library Design Key Features and Goals

- Code developed in standard C++/STL.
- Portable across Windows, Linux and Mac OS X operating systems (32 and 64 bits).
- Friendly API using OpenGL wording and conventions.
- Minimalistic, efficient, professional, reliable.
- Debug-friendly behaviour.
- Designed to be a sensible, high-performance, thin layer on top of OpenGL:

Being a thin wrapper around OpenGL, Visualization Library not only provides the developer with a generic, fast and light 2-3D framework suitable for multiple purposes but also exposes the programmer to a familiar framework. In fact, most of the OpenGL mechanisms are mapped in an intuitive way to Visualization Library's API, maximizing the value of the OpenGL developer's experience and know-how.

- Developed for today's and tomorrow's hardware:

Visualization Library's core architecture is based on technologies such as OpenGL Shading Language, Framebuffer Objects, Multiple Render Targets,  Geometry Shaders, Pixel and Vertex Buffer Objects etc. while at the same time retains full compatibility with OpenGL 1.1 class hardware.

- Designed for OpenGL 2.1, inspired by OpenGL 3.x and OpenGL ES principles:

Many legacy features like accumulation buffer, edge flags, indexed rendering, immediate mode, feedback mode, picking mode etc. have been removed in order to keep Visualization Library as simple as possible and to guarantee that only the optimal rendering paths are used. Special attention has been paid in order to make Visualization Library's design neater and closer to OpenGL ES and OpenGL 3.x principles. Note that at the moment Visualization Library fully supports OpenGL 2.1 plus most of the extensions included in OpenGL 3.x. Support to OpenGL 3.x and OpenGL ES will be available in the future.

- GUI independent:

Like OpenGL, Visualization Library does not depend or rely on any GUI library. It is the user's responsibility to provide an adequate OpenGL context on which Visualization Library operates. However, several utility GUI bindings (Qt4, MFC, Win32...) are provided to further simplify the development process.

- Non direct multithreading support but multithreading-aware:

Like OpenGL, Visualization Library does not provide any special multithreading commands/classes or a multithreading library. It is the user's responsibility to take care of the various aspects involved in the development of a multithreaded or distributed application. However, Visualization Library have been designed to minimize multithreading-related issues as much as possible. If you are interested in the topic you might want to use Visualization Library in conjunction with the following: <a target=_blank href="http://www.threadingbuildingblocks.org">Intel® Threading Building Blocks</a>, <a target=_blank href="http://www.vrjuggler.org">VR Juggler</a>, <a target=_blank href="http://chromium.sourceforge.net">Chromium</a>.

\par Short Feature List

- 3D file formats supported: \b 3DS, \b OBJ, \b PLY (binary and ascii), \b STL (binary and ascii), \b AC3D, \b MD2.
- Image file formats supported: \b JPG, \b PNG, \b TGA, \b TIFF, \b BMP, \b DDS, \b DICOM.
- \b GUI bindings: \b Win32, \b MFC, \b Qt4, \b wxWidgets, \b SDL, \b GLUT, \b Cocoa.
- \b Volume \b visualization: direct volume rendering via screen aligned slices, isosurface extraction via \b marching \b cubes.
- \b Virtual \b File \b System: read/write \b disk files and directories, read \b zip files and directories, read/write \b memory files and directories, read/write \b gz files.
- \b Texturing: 1D, 2D, 3D textures, cubemaps, texture arrays, texture rectangles, multi-texturing, render to texture, texture coordinate generation, texture combiners, mipmapping and mipmaps generation, anisotropic filtering, compressed textures, depth textures, integer textures, non normalized textures.
- \b OpenGL \b Shading \b Language support.
- \b Geometry \b Shaders support.
- GLSL multiple render targets.
- OpenGL accelerated \b 2D \b vector \b graphics.
- \b Multisampling.
- \b Framebuffer \b Objects support.
- \b Vertex \b Buffer \b Objects support.
- \b Pixel \b Buffer \b Objects support.
- Display Lists support.
- Hierachical frustum culling against boxes and spheres.
- Multiple cameras, multiple scene managers, multiple renderings.
- High quality \b unicode \b text rendering and text manipulation functions and classes.
- GLSL based C++ vector/matrix library.
- Hierachical bounding volume scene manager.
- \b Kd-Tree hierachical scene manager.
- \b Portal/sector scene manager.
- Kd-Tree based \b terrain scene manager (with GPU acceleration if available).
- Hierarchical matrix transformations.
- Morphing animations (with GPU acceleration if available).
- Geometry instancing.
- Geometry Level of Detail.
- Shader Level of Deatil.
- Multipassing.
- \b Render \b state \b sorting \b and \b minimization.
- \b Automatic \b transparency \b management.
- Billboards.
- Clipping planes.
- All OpenGL lighting models/materials supported.
- Extensible resource system to support new resource types.
- Geometry optimization functions, triangle reduction/decimation, double vertex removal etc.
- Rich \b image \b manipulation routines.
- Molecular visualization.
- Extrusion generation.
- Linear and Catmull-Rom path interpolation.
- Bicubic Bézier surfaces.
- Edge and silhouette enhancement.

And much more... see \ref pagKeyFeatures "Features Overview" for a complete overview of Visualization Library's features.

*/