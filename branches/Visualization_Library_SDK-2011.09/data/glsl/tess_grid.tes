/**************************************************************************************/
/*                                                                                    */
/*  Copyright (c) 2005-2011, Michele Bosi.                                            */
/*  All rights reserved.                                                              */
/*                                                                                    */
/*  This file is part of Visualization Library                                        */
/*  http://www.visualizationlibrary.org                                               */
/*                                                                                    */
/*  Released under the OSI approved Simplified BSD License                            */
/*  http://www.opensource.org/licenses/bsd-license.php                                */
/*                                                                                    */
/**************************************************************************************/

#version 400
#extension GL_ARB_tessellation_shader : enable

layout( quads, equal_spacing, ccw ) in;

in vec4 tcsPosition[];
out vec2 TexCoord;

uniform mat4 vl_ModelViewProjectionMatrix;
uniform sampler2D tex_heghtmap;
uniform float world_size;
uniform float height_scale;

void main( )
{
	// compute vertex position based on u/v coords and patch corners
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	vec4 a = mix(tcsPosition[0], tcsPosition[1], u);
	vec4 b = mix(tcsPosition[3], tcsPosition[2], u);
	vec4 p0 = mix(a,b,v);

	// compute texture uv from vertex position
	TexCoord = p0.xz / world_size + vec2(0.5,0.5);
	p0.y = texture( tex_heghtmap, TexCoord ).r * height_scale;
	gl_Position = vl_ModelViewProjectionMatrix * p0;
}
